"""
[ 떡볶이 떡 만들기]  >> https://youtu.be/jjOmN2_lmdk

(문제설명)
    - 오늘 동빈이는 여행 가신 부모님을 대신해서 떡집 일을 하기로 했습니다. 
      오늘은 떡볶이 떡을 만드는 날입니다. 동빈이네 떡볶이 떡은 재밌게도 떡볶이의 떡의 길이가 일정하지 않습니다.
      대신에 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰줍니다. 
    - 절단기에 '높이(H)'를 지정하면 줄지어진 떡을 한 번에 절단합니다. 
      높이가 H보다 긴 떡은 H 위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않습니다. 
    - 예를 들어 높이가 19,14,10,17cm 인 떡이 나란히 있고 절단기 높이를 15cm로 지정하면 자른 뒤 떡의
      높이는 15,14,10,15cm 가 될 것입니다. 잘린 떡의 길이는 차례대로 4,0,0,2cm 입니다. 
      손님은 6cm 만큼의 길이를 가져갑니다. 
    - 손님이 왔을 때 요청한 총 길이가 M일 때 '적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 
      높이의 최대값을 구하는 프로그램'을 작성하세요.

(입력조건)
    - 첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M이 주어집니다. 
      ( 1 <= N <= 1,000,000 , 1 <= M <= 2,000,000,000 )
    - 둘째 줄에는 떡의 개별 높이가 주어집니다. 떡 높이의 총합은 항상 M 이상이므로, 손님의 필요한 양만큼
      떡을 사갈 수 있습니다. 높이는 10억보다 작거나 같은 양의 정수 또는 0 입니다. 

(출력조건)
    - 적어도 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값을 출력합니다. 

# 입력예시 
    4 6
    19 15 10 17

# 출력예시 
    15
------------------------
- 적절한 높이를 찾을 때까지 이진 탐색을 수행하여 높이 H를 반복해서 조정하면 됩니다. 
- '현재 이 높이로 자르면 조건을 만족할 수 있는가?' 를 확인 한 뒤에 
  "조건의 만족여부('예' 혹은 '아니요')에 따라서 탐색 범위를 좁혀서 해결"할 수 있습니다. 
- 절단기의 높이는 0부터 10억까지의 정수 중 하나입니다. 
  > 이렇게 큰 탐색 범위를 보면 가장 먼저 "이진탐색"을 떠올려야 합니다. ------------★★★★★

※ 높이H를 낮추면 남는게 많아지고, 높이 H을 높이면 남는게 적어짐 

- 이러한 이진 탐색 과정을 반복하면 답을 도출할 수 있습니다. 
- 중간점의 값은 "시간이 지날수록 '최적화된 값'이 되기 때문에, 과정을 반복하면서 얻을 수 있는 떡의 길이
  합이 필요한 떡의 길이보다 크거나 같을 때마다 '중간점의 값을 기록'하면 됩니다. 

"""
# 재귀적으로 내가 작성한 코드 
# def binary_search(array, target, start, end):
    
#     h = (start + end ) // 2     # 절단기 높이 h 해당
#     total = 0 
#     for i in array:
#         if i > h :  
#              total += i - h 
#     print(f"h >> {h}")
#     print(f"sum >> {total}")

#     if total == target:
#          return h 
#     elif total > target:
#          return binary_search(array, target, h+1, end)
#     else:
#          return binary_search(array, target, start, h-1)


# # n (떡의 개수) , m ( 요청한 떡의 길이 = 최적의 결과값 )
# n,m = list(map(int,input().split()))

# # 떡 
# array = list(map(int,input().split()))

# print(binary_search(array, m, 0, max(array)))

# 해설 답안
# n (떡의 개수) , m ( 요청한 떡의 길이 = 최적의 결과값 )
n,m = list(map(int,input().split()))
# 각 떡의 개별 높이 정보 입력 
array = list(map(int,input().split()))

#이진 탐색을 위한 시작점과 끌점 설정
start = 0 
end = max(array)

# 이진 탐색 수행 ( while 문 활용 )
result = 0 
while(start <= end):
    total = 0 
    mid = (start + end ) //2 
    for x in array : 
        #잘랐을 때의 떡의 양 계산 
        if x > mid : 
            total += x - mid 
    # 떡의 양이 부족한 경우 더 많이 자르기 ( 왼쪽 부분 탐색 )
    if total < m :
        end = mid - 1 
    # 떡의 양이 충분한 경우 덜 자르기( 오른쪽 부분 탐색 )
    else : 
        start = mid + 1
        result = mid  
# 정답 출력
print(result) 


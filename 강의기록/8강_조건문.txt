[파이썬 문법 - 조건문 ] https://youtu.be/PCJOT5LHzxE

* 조건문 
    - 프로그램의 흐름을 제어하는 문법 
    - 조건문을 이용해 조건에 따라서 프로그램의 로직을 설정할 수 있음 
    - 들여쓰기가 적용되어 있는 내용을 처리함 

```
# 조건문 예제 
x = 15 
if x >= 10 : 
    print(" x >= 10 ")

if x >= 0 : 
    print(" x >= 0 ")

if x >= 30 : 
    print(" x >= 30 ")


## 결과 
 x >= 10 
 x >= 0 

```

    - 파이썬에서는 '코드의 블록(Block)을 들여쓰기(Indent)로 지정'함 ----- 중요☆☆☆☆☆☆☆☆☆☆

```
# 조건문 예시 
#score = 85
score = int(input())

if score >= 70:
    print("성적이 70점 이상입니다.")
    if score >= 90 :
        print("우수한 성적입니다.")

else:
    print("성적이 70점 미만입니다.")
    print("조금 더 분발 하세요")

print("프로그램 종료")


## 결과
85
성적이 70점 이상입니다.
프로그램 종료

```


※ 들여쓰기 
    - 탭을 사용하는 쪽 vs 공백(space)문자를 여러번 사용하는 쪽 이 논쟁 중  
    - 파이썬 스타일 가이드라인에서는 '4개의 공백 문자를 사용하는 것을 표준으로 설정'하고 있음 !! 



* 조건문의 기본 형태 
    - if ~ elif ~ else
    - 조건문 사용시 elif 혹은 else 부분은 경우에 따라 사용하지 않아도 됨 
    
        ```
        if 조건문 1 : 
            조건문 1이 true 일때 실행되는 코드 
        elif 조건문 2 : 
            조건문 1에 해당하지 않고, 조건문 2가 true 일때 실행되는 코드    
        else :
            위의 모든 조건문이 모두 True 값이 아닐때 실행되는 코드 
        ```  


```
# 성적 구간에 따른 학점 출력 예제 
#score = 85
score = int(input())

if score >= 90:
    print("학점 : A")
elif score >= 80:
    print("학점 : B")
elif score >= 70:
    print("학점 : C")
else : 
    print("학점 : F")

## 결과 
70
학점 : C
```


* 비교 연산자 
    - 특정한 두 값을 비교할 때 이용 할 수 있음 
      > 대입연산자(=) 와 같은 연산자(==) 차이점 유의 
      >> == , !=, > , < , >= , <=   
* 논리 연산자 
    - 논리 값(Ture/False) 사이의 연산을 수행할 때 사용 
      > X and Y , X or Y , not X 형태가 있음 ( 파이썬이 더욱 직관적 )
      ```
      if True or False:
          print('true 입니다.')
     
      ## 결과 
      true 입니다. 
      ```

* 파이썬의 기타 연산자 
    - 다수의 데이터를 담는 자료형을 위해 'in' 연산자와 'not in' 연산자가 제공됨 
      > 리스트, 튜플, 문자열, 딕셔너리 모두에서 사용가능함 
      >> x in 리스트      # 리스트 안에 x가 들어가 있을때 True 이다 .
      >> x not in 문자열  # 문자열 안에 x가 들어가 있지 않을 때 True 이다. 

* 파이썬의 pass 키워드 
    - 아무것도 처리하고 싶지 않을 때 pass 키워드를 사용함 
    - 예시) 디버깅 과정에서 일단 조건문 형태만 만들어 놓고 조건문을 처리하는 부분은 비워놓고 싶을때
    ```
    score = int(input())

    if score >= 80:
        pass     # 나중에 작성할 소스 코드 
    else:
        print('성적이 80점 미만 입니다.')

    print('프로그램 종료')
    ```


※ 조건문의 간소화 
   1) 조건문에서 실행될 소스코드가 한 줄인 경우, 굳이 줄 바꿈 하지 않고도 간략 표현 가능 
   ```
    score = int(input())

    if score >=80: result = "SUCCESS"
    else: result = "FAIL"

    print(result)

   ```

   2) 조건부 표현식 (Conditional Expression)은 if ~ else 문을 한 줄에 작성할 수 있도록 해줌 
   ```
    score = int(input())
    # 참 값이 왼쪽임 
    result = "SUCSESS" if score >=80 else "FAIL"

    print(result)
   ```

※ 파이썬 조건문 내에서의 부등식 
   - 파이썬은 조건문 안에서 수학의 부등식을 그대로 사용할 수 있음 
     예) x > 0 and x < 20 과 0 < x < 20 은 같은 결과를 반홤함 
     ```
     # 코드 스타일 1
     x = 15 
     if x > 0 and x < 20 
        print("x는 0 이상 20미만의 수입니다.")

     # 코드 스타일 2
     x = 15 
     if 0 < x < 20 
        print("x는 0 이상 20미만의 수입니다.")
     ```
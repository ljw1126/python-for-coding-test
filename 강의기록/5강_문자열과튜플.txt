[파이썬 문법 - 문자열과 튜플 자료형] https://youtu.be/p6df7qv6jFQ

* 문자열 자료형 
- 문자열 변수를 초기화할 때는 큰따옴표(") 나 작은 따옴표(')를 이용함 
- 문자열 안에 큰따옴표나 작은따옴표가 포함되어야 하는 경우가 있음 
  > 전체 문자열을 큰따옴표로 구성하는 경우, 내부적으로 작은따옴표 포함할 수 있음 
  > 전체 문자열을 작은따옴표로 구성하는 경우, 내부적으로 큰따옴표 포함할 수 있음 
  > 혹은 백슬래기(\)를 사용하면, 큰따옴표나 작은따옴표를 원하는 만큼 포함할 수 있음 

```
data = 'hello world'
print(data)

data = " Don't you know \"Python\"?"
print(data)

```

* 문자열 연산 
- 문자열 변수에 덧셈(+)을 이용하면 문자열이 더해져서 연결(Concatenate)됨 
- 문자열 변수를 특정한 양의 정수와 곱하는 경우, 문자열이 그 값만큼 여러 번 더해짐 
- 문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱을 이용할 수 있음 
  > 다만 문자열은 특정 인덱스의 값을 변경할 수 없음 ( Immutable )

```
a = 'hello'
b = 'world!'
print( a + ' ' + b)

a = "String"
print(a*3)

a = "ABCDER"
print(a[2:4])

## 결과 
hello world!
StringStringString
CD

```

* 튜플 자료형 
- 리스트와 유사하지만 문법적 차이가 있음 
  > 튜플은 한 번 선언된 값을 변경할 수 없음 ( Immutable )
  > 리스트는 대괄호([])를 이용하지만, 튜플은 소괄호(())를 이용 
- 튜플은 리스트에 비해 상대적으로 '공간 효율적'임

```
a = (1,2,3,4,5,6,7)

print(a[3])
print(a[1:4])

## 결과 
4
(2, 3, 4)

a[2] = 7  # 에러 발생 , Immutable
```


※ 튜플을 사용하면 좋은 경우 
- '서로 다른 성질'의 데이터를 묶어서 관리해야 할때 
  > 최단 경로 알고리즘에서는 ( 비용, 노드번호)의 형태로 튜플 자주 사용함 
- 데이터의 나열을 해싱(Hashing)의 키 값으로 사용해야 할 때
  > 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있음 
- 리스트보다 '메모리를 효율적'으로 사용해야 할 때 


[ 이진(Binary) 탐색 알고리즘 ] ------------- 탐색 범위가 큰 경우 이진탐색을 사용할 것 ! ( 미리 데이터가 정렬되어 있을 때 사용!)
     https://youtu.be/-Gx0T92-7h8
    - 순차 탐색 : 리스트 안에 있는 특정한 '데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인'하는 방법
    - 이진 탐색 : 정렬되어 있는 리스트에서 '탐색 범위를 절반씩 좁혀가며 데이터를 탐색'하는 방법
        > 이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 성정함 

    * 이진 탐색의 시간 복잡도 
        > 단계마다 탐색 범위를 2로 나누는 것과 동일하므로 연산 횟수는 log2_N에 비례함 
        > 예를 들어 초기 데이터 개수가 32개일 때, 이상적으로 1단계를 거치면 16개가량의 데이터만 남음
            >> 2단계를 거치면 8개가량의 데이터만 남습니다.
            >> 3단계를 거치면 4개가량의 데이터만 남습니다.
        > 다시 말해 이진 탐색은 탐색 범위를 절반씩 줄이며 시간 복잡도는 'O(logN)'을 보장함 

    * 파이썬 이진 탐색 라이브러리 
    - bisect_left(a,x)
      : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스를 반환
    - bisect_right(a,x)
      : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 오른쪽 인덱스를 반환

      ```
        from bisect import bisect_left, bisect_right 

        a = [1,2,4,4,8] 
        x = 4  // a 배열에 삽입할 값 

        print(bisect_left(a,x))
        print(bisect_right(a,x))

        # 실행결과
        2
        4
      ```

    
    ※ 파라메트릭 서치(Parametric Search) <<<<< 이진 탐색으로 문제 해결 
    - "최적화 문제를 결정 문제('예' 혹은 '아니오') 로 바꾸어 해결하는 기법"을 말함
        > 예시 ) 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제 
    - 일반적으로 코딩 테스트에서 파라메트릭 서치 문제는 '이진 탐색을 이용하여 해결'할 수 있음
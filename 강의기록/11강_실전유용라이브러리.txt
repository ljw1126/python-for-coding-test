[ 파이썬 문법 - 실전에서 유용한 표준 라이브러리 ] https://youtu.be/W1SO2e5IaSo

* 실전에서 유용한 표준 라이브러리 
- 내장함수 : 기본 입출력 함수부터 정렬 함수까지 기본적인 함수들을 제공함
  > 파이썬P 작성할때 없어서는 안 되는 필수 기능 포함함 
- itertools : 반복되는 형태의 데이터를 처리하기 위한 유용한 기능 제공함
  > 특히 순열과 조합 라이브러리는 코딩 테스트에서 자주 사용됨 
- heapq : 힙(Heap) 자료구조 제공함
  > 일반적으로 우선순위 큐 기능을 구현하기 위해 사용됨 
- bisect : 이진 탐색(Binary Search)기능을 제공함 
- collections : 덱(deque), 카운터 (Counter) 등의 유용한 자료구조를 포함함
- math : 필수적인 수학적 기능 제공함 
  > 펙토리얼 , 제곱근, 최대공약수(GCD), 삼각함수 관련 함수부터 파이(pi)와 같은 상수를 포함함 


* 자주 사용되는 내장 함수 
```
# sum()
result = sum([1,2,3,4,5])
print(result)

# min(), max()
min_result = min(7,4,5,2)
max_result = max(7,4,5,2)
print(min_result , max_result)

# eval()  //수식 계산 
result = eval("(3+5)*7")
print(result)

## 결과 
15
2 7
56
```
```
# sorted()
result = sorted([9,1,8,5,4])
reverse_result = sorted(result, reverse=True)
print(result)
print(reverse_result)


# sorted() with key  , 각 원소에서 두번째 원소 기준으로 정렬 reverse=True 내림차순
array = [('홍',90),('이',75),('김',98)]
result = sorted(array, key=lambda x : x[1], reverse=True)
print(result)

## 결과 
[1, 4, 5, 8, 9]
[9, 8, 5, 4, 1]
[('김', 98), ('홍', 90), ('이', 75)]

```


* 순열과 조합 
  - 모든 경우의 수를 고려해야 할 때 어떤 라이브러리를 효과적으로 사용할 수 있을까요?
  - "순열" : 서로 다른 n 개에서 서로 다른 r 개를 선택하여 일렬로 나열하는 것 
    예) {'a','b','c'}에서 세 개를 선택하여 '순서를 고려하여' 나열하는 경우 ( 중복 x ) 
        : 'abc', 'acb' , 'bac', 'bca', 'cab','cba'
  - "조합" : 서로 다른 n 개에서 순서에 상관없이 서로 다른 r개를 선택하는 것 ( 중복 x )
    예) {'a','b','c'}에서 '순서를 고려하지 않고' 두개를 뽑는 경우 : 'ab','ac','bc'

    순열의 수 nPr = n * (n-1) * (n-2) * ... * (n-r+1)
    조합의 수 nCr = (  n * (n-1) * (n-2) * ... * (n-r+1) ) / r!

  

```
# 순열 : 서로 다른 n 개에서 서로 다른 r개를 선택하여 일렬로 나열하는 것 

from itertools import permutations 

# 데이터 준비
data = ['A','B','C']
result = list(permutations(data,3)) # 모든 순열 구하기 
print(result)


## 결과 
[('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]

```

```
# 조합 : 서로 다른 n개에서 순서에 상관없이 서로 다른 r개를 선택하는 것 
from itertools import combinations 

# 데이터 준비
data = ['A','B','C']
result = list(combinations(data,2)) # 2개를 뽑는 모든 조합 구하기 
print(result)

## 결과 
[('A', 'B'), ('A', 'C'), ('B', 'C')]
### 3개를 뽑는 조합은 >> [('A', 'B', 'C')]
```

※ 중복 순열과 중복 조합 예시 
```
# 중복 순열 
from itertools import product 

data = ['A','B','C']
result = list(product(data, repeat=2)) # 2개를 뽑는 모든 순열 구하기 ( 중복 허용 )
print(result)

## 결과 
[('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'B'), ('B', 'C'), ('C', 'A'), ('C', 'B'), ('C', 'C')]


# 중복 조합
from itertools import combinations_with_replacement 

data = ['A','B','C']
result = list(combinations_with_replacement(data,2)) # 2개를 뽑는 모든 조합 구하기(중복 허용)
print(result)

## 결과 
[('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'B'), ('B', 'C'), ('C', 'C')]


```


* counter 라이브러리 
  - 리스트와 같은 반복 가능한(iterable) 객체가 주어졌을때, 내부 원소가 몇번씩 등장했는지 알려줌 

```
from collections import Counter 

counter = Counter(['red','blue','red','green','blue','blue'])

print(counter['blue']) # 'blue'가 등장한 횟수 출력 
print(counter['green']) # 'green'이 등장한 횟수 출력 
print(dict(counter)) # 사전 자료형으로 반환 

## 결과
3
1
{'red': 2, 'blue': 3, 'green': 1}
```



* math 라이브러리 활용하여 최대 공약수와 최소 공배수 구하기 
  - 최대 공약수를 구해야 할 때는 math 라이브러리의 gcd() 함수를 이용할 수 있음 
    // gcd : greatest common divisor
    > 최대 공약수 : 두 수가 주어졌을때 공통된 약수 중에 가장 큰값 
    > 최소 공배수 : 두 수가 주어졌을때 공통된 배수 중에서 가장 최소값
```
import math 

# 최소 공배수를 구하는 함수 
dec lcm(a,b):
  return a*b // math.gcd(a,b)

a = 21
b = 14

print(math.gcd(21,14)) # 최대공약수(GCD)계산 
print(lcm(21,14)) # 최소 공배수(LCM) 계산

## 결과 
7
42
```


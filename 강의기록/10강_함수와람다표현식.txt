[ 파이썬 문법 - 함수와 람다표현식 ] https://youtu.be/M_wLOmNRBN8

* 함수 
    - 함수(Function)란 특정한 작업을 하나의 단위로 묶어 놓은 것을 의미 
    - 함수를 사용하면 불필요한 소스코드의 반복을 줄일 수 있음 ( 장점 )
    - 함수의 종류 
      1) 내장 함수 : 파이썬이 기본적으로 제공하는 함수 
      2) 사용자 정의 함수 : 개발자가 직접 정의하여 사용할 수 있는 함수 

    
* 함수 정의하기 
    - 프로그램에는 똑같은 코드가 반복적으로 사용되어야 할 때가 많음 
    - '함수를 사용하면 소스코드의 길이를 줄일 수 있음'
       > 매개변수 : 함수 내부에서 사용할 변수 
       > 반환 값 : 함수에서 처리된 결과를 반환 

       ```
        def 함수명(매개변수):
            실행할 소스코드 
            return 반환 값 
       ```

```
# 더하기 함수 예시 1
def add(a,b):        # parameter
    return a + b 

print(add(3,7))   # arugment 

# 더하기 함수 예시 2
def add(a,b):        
    print('함수의 결과 : ' , a + b) 

add(3,7)    

# 파라미터 지정하기 - 파라미터의 변수를 직접 지정할 수 있음 ( 이때 매개변수 순서 상관 없음 )
def add(a,b):        
    print('함수의 결과 : ' , a + b) 

add(b=3, a=7) 


## 결과 
함수의 결과 :  10

```


    - global 키워드로 변수를 지정하면 해당 함수에서는 지역 변수를 만들지 않고, 
      함수 바깥에 선언된 변수를 바로 참조하게 됨 
    ※ 함수 안에 지역변수가 있고 밖에 전역변수가 있으면, 함수는 함수 안에 지역변수를 먼저 참고 함 
```
# global 키워드로 전역변수 참조하게 함 
a = 0 

def func():
    global a 
    a += 1 

for i in range(10):
    func()

print(a)

## 결과 
10 


# array 는 전역변수로 선언하고 함수에서 호출가능 
array = [1,2,3,4,5]

def func():
   array.append(6)

func()
print(array)

## 결과 
[1, 2, 3, 4, 5, 6]


```



* 여러 개의 반환 값 
    - 파이썬에서는 함수는 여러 개의 반환 값을 가질 수 있음 
```
# packing과 unpacking 

def operator(a,b):
    add_var = a+b 
    subtract_var = a-b 
    multiply_var = a*b
    divide_var = a/b 
    # packing
    return add_var, subtract_var, multiply_var, divide_var

# unpacking
a,b,c,d = operator(7,3)
print(a,b,c,d)

## 결과 
10 4 21 2.3333333333333335
```


* 람다 표현식 
    - 람다 표현식을 이용하면 함수를 간단하게 작성 가능 
      > 특정 기능을 수행하는 함수를 한 줄에 작성할 수 있다는 특징 있음 
    - 함수의 기능이 간단할 때 효과적으로 사용가능 
```
# 일반적인 방식 
def add(a,b):
    return a + b 

print(add(3,7))


# 람다 표현식으로 구현한 add() => ( lambda입력 매개변수 : 함수 반환값 ) (매개변수 ) 
print((lambda a,b : a + b)(3,7))

## 결과 
10
10

```

```
# 람다 표현식 예시 : 내장 함수에서 자주 사용되는 람다 함수 
array = [('홍길동', 50),('이순신',32),('아무개',74)]

# 튜플이 주어졌을때 두번째 원소로 정렬하도록 
def my_key(x):
    return x[1]

# array 로 정렬하되 정렬기준 key는 
print(sorted(array, key = my_key))
print(sorted(array, key = lambda x : x[1]))


## 결과 
[('이순신', 32), ('홍길동', 50), ('아무개', 74)]
[('이순신', 32), ('홍길동', 50), ('아무개', 74)]
```

```
# 람다 표현식 예시 : 여러 개의 리스트에 적용 
list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]

# map이 애매하네 .. 
result = map(lambda a,b: a+b, list1, list2)

print(list(result))

## 결과 
[7, 9, 11, 13, 15]
```
    


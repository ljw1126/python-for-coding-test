[파이썬 문법 - 리스트자료형] https://youtu.be/GUwkMLtDQJE

* 리스트 자료형 
- 여러 개의 유사한 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형 
- 리스트 대신에 '배열' 혹은 '테이블'이라고 부르기도 함 

1. 리스트 초기화 
- 리스트는 대괄호([])안에 원소를 넣어 초기화하며, 쉼표(,)로 원소 구분함 
- 비어 있는 리스트 선언시에는 list() 혹은 간단한 []를 이용할 수 있음 
- 리스트 원소 접근시 인덱스(Index)값을 괄호에 넣음 
  > 인덱스는 0 부터 시작 !!!!
  
```
# 크기가 N이고, 모든값이 0인 1차원 리스트 초기화
n = 10 
a = [0] * n 
print(a)

## 결과 
[0,0,0,0,0,0,0,0,0,0,0]

```

  - 인덱스 값을 입력하여 '리스트의 특정한 원소에 접근하는 것을 인덱싱(Indexing)'이라 함
    > 파이썬의 인덱스 값은 양의 정수와 음의 정수를 모두 사용할 수 있음 
    > 음의 정수를 넣으면 원소를 거꾸로 탐색하게 됨 ( -1 부터 작아짐 )

```
a = [1,2,3,4,5,6,7,8,9]

print(a[7])
print(a[-1])
print(a[-3])

a[3] = 7
print(a)

```

  - 리스트에서 연속적인 위치를 갖는 원소를 가져와야 할때는 슬라이싱(Slicing)을 이용함 
    > 대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스를 설정할 수 있다 
    > '끝 인덱스는 실제 인덱스보다 1을 더 크게 설정'함 ! ( 다른 언어에서도 마찬가지로 관행적 )

```
a = [1,2,3,4,5,6,7,8,9]

print(a[3])
print(a[1:4])

## 결과 
4
[2, 3, 4]
```

  - 리스트 컴프리헨션 
    > 리스트 초기화하는 방법 중 하나 
      >> 대괄호 안에 조건문과 반복문을 적용하여 리스트 초기화 가능 

  # 리스트 컴프리헨션인 경우 
```
# 0 ~ 9 까지의 수를 포함하는 리스트 
array = [i for i in range(10)]
print(array)

## 결과 
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# 0~19까지의 수중 홀수만 포함하는 리스트 
array = [ i for i in rang(20) if i%2 == 1]
print(array)

# 1부터 9까지의 수들의 제곱값을 포함하는 리스트
array = [ i*i for i in range(1,10)]
print(array)

## 결과 
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
[1, 4, 9, 16, 25, 36, 49, 64, 81]
```    
    
     > 리스트 컴프리헨션은 '2차원 리스트를 초기화할때 효과적으로 사용'가능함 
     > 특히 N * M 크기의 2차원 리스트를 한 번에 초기화 해야 할 때 매우 유용함 ( 기억 해두기 )
       예) array = [ [0] * m for _ in range(n)]
     > 만약 2차원 리스트를 초기화할때 다음과 같이 작성하여 예기치 않은 결과 나올 수 있음 
       잘못된 예) array = [[0]*m]*n 
                  // 위 코드는 '전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식'됨
                  // 즉 하나만 수정해도 동일한 객체니 다 수정된다는 ..  
    
```
# N * M 크기의 2차원 리스트 초기화 ( 잘못된 방법 )
n = 4
m = 3
array = [[0] * m ] *n 
print(array)

array[1][1] = 5 
print(array)

## 결과 
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
[[0, 5, 0], [0, 5, 0], [0, 5, 0], [0, 5, 0]]

```
  

※ 언더바(_)는 언제 사용하나요?
   파이썬에서는 반복 수행하되 반복을 위한 변수의 값을 무시하고자 할때 언더바(_)를 자주 사용함 

```
# 단순히 반복 작업을 하는 용도로 ( 변수 사용 안하고 )
for _ in range(5):
    print("hello world!")
```


※ 리스트 관련 기타 메소드 
함수명       시간복잡도
append()      O(1)  
sort()        O(NlogN)
reverse()     O(N)
insert()      O(N)   
count()       O(N)
remove()      O(N) 


```
a = [1,4,3]
print("기본 리스트 : " , a)

# 리스트에 원소 삽입 
a.append(2)
print("삽입:",a)

# 오름차순 정렬 (1,2,3,4)
a.sort()
print("오름차순 정렬 :",a)

# 내림차순 정렬(4,3,2,1)
a.sort(reverse = True)
print("내림차순 정렬 : ",a)


## 결과 
기본 리스트 :  [1, 4, 3]
삽입: [1, 4, 3, 2]
오름차순 정렬 : [1, 2, 3, 4]
내림차순 정렬 :  [4, 3, 2, 1]

```

```
a = [4,3,2,1]

# 리스트 원소 뒤집기 
a.reverse()
print("원소 뒤집기:",a)

# 특정 인덱스에 데이터 추가
a.insert(2,3)
print("인덱스 2에 3추가 : ",a)

# 특정 값인 데이터 개수 세기
print("값이 3인 데이터 개수",a.count(3))

# 특정 값 데이터 삭제 
a.remove(1)
print("값이 1인 데이터 삭제:",a)

## 결과 
원소 뒤집기: [1, 2, 3, 4]
인덱스 2에 3추가 :  [1, 2, 3, 3, 4]
값이 3인 데이터 개수 2
값이 1인 데이터 삭제: [2, 3, 3, 4]

```

```
a = [1,2,3,4,5,5,5]
remove_set = {3,5} # 집합 자료형 

# remove_list에 포함되지 않는 값만을 저장 
result = [ i for i in a if i not in remove_set]
print(result)

## 결과 
[1, 2, 4]


```



"""
[최대공약수 계산(유클리드 호제법) 예제]
- '두 개의 자연수에 대한 최대공약수'를 구하는 대표적인 알고리즘으로는 유클리드 호제법이 있습니다. 
    ※ 유클리드 호제법 
        > 두 자연수 A,B 에 대하여 ( A > B ) A를 B로 나눈 나머지를 R이라고 합시다.
        > 이때 A와 B의 최대공약수는 B와 R의 최대공약

- 유클리드 호제법의 아이디어를 그대로 재귀 함수로 작성할 수 있습니다. 
    예시 ) GCD(192,162)      // Greateast Common Divisor
    단계 | A | B 
    1    |192|162
    2    |162|30
    3    |30|12
    4    |12|6 

- 유클리드 호제법 
  > 두 자연수 A, B에 대하여 ( A > B ) A를 B로 나눈 나머지를 R이라고 합시다. 
  > 이때 A와 B의 최대공약수는 B와 R의 최대공약수와 같습니다. 

# 입력예시  // 순서 뒤집혀도 상관없음  
  192, 162 
  60,24
  1254,582

# 출력예시 
  6
  12
  6


-------------
[최대 공약수와 최소 공배수]
1. 최대공약수 GCD ( Greatest Common Divisor)
    두 자연수의 공통된 약수 중 가장 큰 수를 의미한다. 
    예) 72와 30의 최대 공약수는 6이다. 
    > 유클리드 호제법 사용 gcd(a,b) = gcd(b,r) 
    > 이때 r은 a% b 한 나머지이다 
    > a%b가 0일때 b가 최대 공약수다

2. 최소공배수 LCM ( Least Common Multiple )
    두 자연수의 공통된 배수 중 가장 작은 수를 의미한다. 
    예) 72와 30의 최소공배수는 360이다. 
    > 최소 공배수 = 두 자연수의 곱 / 최대 공약수 
    

"""

def gcd(a,b):
    #print(f"{a},{b}")
    if a%b == 0 :
        return b 
    else:
        return gcd(b,a%b)

gcd_value = gcd(192,162)
lcm_value = int((192*162)/gcd_value)
print(f"최대 공약수는 {gcd_value}")
print(f"최소 공배수는 {lcm_value}")
#print(gcd(192,162))
[ 그래프 탐색 알고리즘 - DFS/BFS ]
- 탐색(Search)이란 많은 양의 데이터 중에서 '원하는 데이터를 찾는 과정'을 말합니다. 
- 대표적인 그래프 탐색 알고리즘으로는 DFS와 BFS가 있습니다.
- 'DFS/BFS는 코딩 테스트에서 매우 자주 등장하는 유형'이므로 반드시 숙지해야 함 ☆☆☆☆☆☆☆☆☆☆

1. '스택(Stack)' 자료구조  // ※ 박스 쌓기 예시로 기억하기 
    - 먼저 들어 온 데이터가 나중에 나가는 형식(선입후출, First In Last Out)의 자료구조입니다. 
    - '입구와 출구가 동일한 형태'로 스택을 시각화할 수 있습니다. 
    - 스택 동작 예시 ( p125 )
    - 파이썬에서 단순히 리스트 자료형을 사용하면 됨 
      > 맨 오른쪽 부터 추가하는 append(), 맨 오른쪽 부터 삭제하는 pop() 메소드 지원
      > append()와 pop()의 시간복잡도는 O(1) 가짐 

```
stack = []

# 삽입(5)-삽입(2)-삽입(3)-삽입(7)-삭제()-삽입(1)-삽입(4)-삭제()
stack.append(5)
stack.append(2)
stack.append(3)
stack.append(7)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop()

print(stack[::-1]) # 최상단 원소부터 출력
print(stack) # 최하단 원소 부터 출력 

```

2. '큐(Queue)' 자료구조
    - 대기 줄에 비유할 수 있다. 
    - 먼저 들어 온 데이터가 먼저 나가는 형식(선입선출, Fisrt In First Out)의 자료구조 입니다. 
    - 큐는 '입구와 출구가 모두 뚫려 있는 터널과 같은 형태'로 시각화 할 수 있습니다. 
    - deque 라이브러리의 append() 와 popleft() 의 시간복잡도는 O(1) 이다.

```
# list를 이용하여 구현할 수 있지만, 시간복자도가 높아지므로 deque(덱) 라이브러리를 사용하길 권고함
# deque 라이브러리의 경우 stack과 queue의 장점을 합친거

from collections import deque 

# 큐(Queue) 구현을 위해 deque 라이브러리 사용 
queue = deque()

# 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) -삭제()
queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()

print(queue) # 먼저 들어온 순서대로 출력 
queue.reverse() # 역순으로 바꾸기
print(queue) # 나중에 들어온 원소부터 출력


```


[재귀함수] //DFS/BFS 구현시 자주 사용됨
    - '재귀함수(Recursive Function)란 자기 자신을 다시 호출하는 함수'를 의미합니다.
    - 단순한 형태의 재귀 함수 예제 
      > '재귀 함수를 호출합니다'라는 문자열을 무한히 출력합니다. 
      > 파이썬에서는 (default로) 어느 정도 출력하다가 최대 재귀 깊이 초과 (오류) 메시지가 출력된 후 종료 

        ```
        def recursive_function():
            print('재귀 함수를 호출합니다. ')
            recursive_function()

        recursive_function()
        ```
    - 재귀 함수를 문제 풀이에서 사용할 때는 재귀 함수의 종료 조건을 반드시 명시해야 함 
    - 종료 조건을 제대로 명시하지 않으면 함수가 무한히 호출될 수 있음 
      > '종료 조건'을 포함한 재귀 함수 예제 

        ```
        def recursive_function(i):
            # 100번째 호출을 했을 때 종료되도록 종료 조건 명시 
            if i == 100 :
                return 

            print(i, '번째 재귀함수에서', i + 1, '번째 재귀함수를 호출합니다.')
            recursive_function(i+1)  
            print(i, '번째 재귀함수를 종료합니다.') # i가 100일때 차례대로 감소하면서 출력됨(이해 x)  
            
        recursive_function1()


        ```

    - 재귀 함수 사용시 유의사항 
      > 재귀 함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성할 수 있습니다. 
        >> 단, 오히려 다른 사람이 이해하기 어려운 형태의 코드가 될 수 있으므로 신중하게 사용해야 함 
      > 모든 '재귀 함수는 반복문을 이용하여 동일한 기능을 구현'할 수 있습니다. 
      > 재귀 함수가 반복문보다 유리한 경우도 있고 불리한 경우도 있습니다. 
      > 컴퓨터가 함수를 연속적으로(재귀적으로) 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓입니다. 
        >> 그래서 스택을 사용해야 할 때 구현상 '스택 라이브러리 대신에 재귀 함수를 이용'하는 경우가 많음 
           ※ 그러므로 DFS에서 재귀함수를 사용함  




[DFS(Depth-First Search)]
  - DFS 는 '깊이 우선 탐색'이라고도 부르며 그래프에서 '깊은 부분을 우선적으로 탐색하는 알고리즘'입니다.
  - DFS 는 '스택 자료구조(혹은 재귀 함수)를 이용'하며, 구체적인 동작 과정은 다음과 같습니다. 
    1. 탐색 시작 노드를 스택에 삽입하고 방문처리를 합니다. 
    2. 스택의 최상단 노드에 방문한지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 
       방문 처리합니다. 방문하지 않는 인접 노드가 없으면 스택에서 최상단 노드를 꺼냅니다. 
    3. 더 이상 2번의 과정을 수행할 수 없을 때까지 반복합니다. 
    
[BFS(Breadth-First Search)]
  - BFS는 '너비 우선 탐색'이라고 부르며, 그래프에서 '가까운 노드부터 우선적으로 탐색하는 알고리즘'입니다. 
  - BFS는 '큐 자료구조'를 이용하며, 구제적인 동작 과정은 다음과 같습니다. 
    1. 탐색 시작 노드를 큐에 삽입하고 방문 처리를 합니다. 
    2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 바문하지 않는 노드를 
       모두 큐에 삽입하고 방문처리 합니다. 
    3. 더 이상 2번의 과정을 수행할 수 없을때까지 반복합니다. 
      










    

